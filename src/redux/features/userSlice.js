import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import axios from 'axios';

export const fetchUsers = createAsyncThunk("users/fetchUsers", async (data, { rejectWithValue }) => {
    try {
        const response = await axios.get('https://jsonplaceholder.typicode.com/users');
        return response.data
    } catch (err) {
        return rejectWithValue(err.response.data)
    }
})

export const initialState = {
    users: [],
    loading: false,
    error: null,
  }

export const userSlice = createSlice({
    name: "users",
    initialState,

   // This reducer is to handle the action of deleting a user from the state.
    reducers: {
        deleteUser: (state, action) => {
            const { id } = action.payload
            const updatedUsers = state.users.filter(user => user.id !== id)
            return {
                ...state,
                users: updatedUsers
            }
        }
    },

    // This extraReducers handles actions dispatched by fetchUsers, updating the state for different scenarios (pending, fulfilled, rejected).
    extraReducers: (builder) => {
        builder
            // The pending case sets the loading state to true
            .addCase(fetchUsers.pending, (state) => {
                state.loading = true
                state.error = null
            })
            // The fulfilled case updates the loading state to false and stores the fetched users' data
            .addCase(fetchUsers.fulfilled, (state, action) => {
                state.loading = false
                state.error = null
                state.users = action.payload
            })
            // The rejected case sets the loading state to false and stores the error message.
            .addCase(fetchUsers.rejected, (state, action) => {
                state.loading = false
                state.error = action.error.message
            })
    }
})

// export the action creators (deleteUser) and the reducer generated by the userSlice.
export const { deleteUser } = userSlice.actions

export default userSlice.reducer